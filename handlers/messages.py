import aiogram.utils.exceptions
from handlers.init import *


async def start_cmd_handler(msg: Message, state: FSMContext):
    await state.finish()

    # Create user
    execute(
        ('INSERT OR IGNORE INTO users '
         '(user_id, username, created) '
         'VALUES (%s, "%s", %s);') %
        (msg.from_user.id, msg.from_user.username,
         now_unix_time())
    )
    execute(
        ('INSERT OR IGNORE INTO wallets '
         '(id, user_id, created) '
         'VALUES ("%s", %s, %s);') %
        (key(), msg.from_user.id, now_unix_time())
    )

    answer = (
        '–ü—Ä–∏–≤–µ—Ç, *{}*!üëã\n\n'
        '–Ø - —Å–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π.\n\n'
        'üíµ –ú–æ—è –≤–∞–ª—é—Ç–∞ - *—Ç–æ–∫–µ–Ω—ã* –∏ *–∞–ª–º–∞–∑—ã*.\n'
        '–¢–æ–∫–µ–Ω—ã –≤—ã—Å—Ç—É–ø–∞—é—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, '
        '–∞ –∞–ª–º–∞–∑—ã - –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã.\n\n'
        'üë• –û–±–º–µ–Ω–∏–≤–∞–π *–∞–ª–º–∞–∑—ã *–ø–æ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–º—É '
        '–∫—É—Ä—Å—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π *—Ç–æ–∫–µ–Ω—ã*.\n\n'
        'üèÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º '
        '*—Ç–æ–∫–µ–Ω–æ–≤* —Å–º–æ–≥—É –ø–æ–ø–∞—Å—Ç—å –≤ *—Ç–æ–ø-10.*\n\n'
    ).format(msg.from_user.first_name)

    if msg.get_args():
        callback_data = msg.get_args().split('callbackData')[1]
        reply_markup = InlineKeyboardMarkup()
        reply_markup.add(InlineKeyboardButton(text='‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å ‚Ä¢',
                                              callback_data=callback_data))
        await msg.answer(text='‚õì *–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª*', parse_mode='markdown',
                         reply_markup=reply_markup)
    else:
        await msg.answer(text=answer, parse_mode='markdown',
                         reply_markup=start_menu_reply_markup)


async def wallet_cmd_msg_handler(msg: Message):
    wallet_id, tokens, diamonds = execute(
        ('SELECT id, tokens, diamonds '
         'FROM wallets '
         'WHERE user_id=%s') % msg.from_user.id,
        fetchone=True
    )
    diamonds_word = morph.parse('–∞–ª–º–∞–∑')[0].make_agree_with_number(diamonds).word
    tokens_word = morph.parse('—Ç–æ–∫–µ–Ω')[0].make_agree_with_number(tokens).word

    answer = ('üëõ *–í–∞—à –∫–æ—à–µ–ª—ë–∫*\n\n'
              'üåé –ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤: \n`%s`\n\n'
              'üîò *%s* %s\n\n'
              'üí† *%s* %s') % \
             (wallet_id, tokens, tokens_word, diamonds, diamonds_word)
    await msg.answer(text=answer, parse_mode='markdown',
                     reply_markup=start_menu_reply_markup)


async def help_cmd_handler(msg: Message, state: FSMContext):
    await state.finish()
    await state.finish()

    answer = ('üöë –ü–æ–º–æ—â—å '
              '...')
    await msg.answer(answer, parse_mode='markdown')


async def get_sticker_id_handler(msg: Message):
    await msg.answer_sticker(sticker=msg.sticker.file_id)
    print(msg.sticker.file_id)


async def send_tokens_select_wallet_handler(msg: Message, state: FSMContext):
    await state.update_data(data={'wallet': msg.text})

    answer = 'üîò *–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏*'
    await msg.answer(text=answer, parse_mode='markdown',
                     reply_markup=select_tokens_count_reply_markup)
    await WalletStatesGroup.select_tokens_count.set()


async def top_cmd_handler(msg: Message):
    top_wallets = execute(
        ('SELECT id, tokens, diamonds '
         'FROM wallets ORDER BY tokens'),
        fetchall=True
    )[::-1]
    answer = 'üìä –¢–æ–ø-10 –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\n'

    for num, wallet in enumerate(top_wallets, start=1):
        if num == 1:
            num = '1 üèÜ'
        answer += '%s. `%s`\n' \
                  '‚îú üéØ *%s —Ç–æ–∫–µ–Ω–æ–≤*\n' \
                  '‚îî üí† *%s –∞–ª–º–∞–∑–æ–≤*\n\n' % (num, wallet[0], wallet[1], wallet[2])
    await msg.answer(text=answer, parse_mode='markdown')
